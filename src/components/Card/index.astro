---
import { Icon } from "astro-icon/components";
import Content from "./Content.astro";

interface Props {
  title?: string;
  body?: string;
  href?: string;
  height?: string;
  width?: string;
  borderColor?: string;
  class?: string;
  contentClass?: string;
  paddingClass?: string;
  contentShouldScroll?: boolean;
}

import { createGenerator } from "unocss";
import config from "uno.config";

const ctx = createGenerator(config);
const scrollbarColorDark = ctx.config.theme.colors["gray"]["500"];
const scrollbarColorLight = ctx.config.theme.colors["gray"]["200"];

const {
  title,
  body,
  href,
  height,
  borderColor,
  class: classNames,
  contentClass,
  paddingClass,
  contentShouldScroll = false,
} = Astro.props;
---

<style is:global define:vars={{ scrollbarColorDark, scrollbarColorLight }}>
  .card.scroll-content {
    --colored-border-width: 1px;
    --colored-border-length: 25%;
    --scrollbarColor: var(--scrollbarColorLight);
  }

  :root.dark {
    .card.scroll-content {
      --scrollbarColor: var(--scrollbarColorDark);
    }
  }

  @media (prefers-color-scheme: dark) {
    .card.scroll-content {
      --scrollbarColor: var(--scrollbarColorDark);
    }
  }

  .card.scroll-content {
    display: flex;
    flex-direction: column;
  }

  .card.scroll-content .content {
    flex: 1;
    max-height: 100%;
    overflow-y: auto;
  }

  .card.scroll-content .content::-webkit-scrollbar {
    width: auto;
  }

  .card.scroll-content .content::-webkit-scrollbar-thumb {
    border: 3px solid transparent;
    background-color: var(--scrollbarColor);
    background-clip: padding-box;
    border-radius: 8px;
  }

  .card.scroll-content .content::-webkit-scrollbar-track {
    background-color: transparent;
  }
</style>

<div
  class={`card ${contentShouldScroll ? "scroll-content" : ""} h-max sm:h-auto group overflow-hidden transform-y-[-40%] dark:bg-darkslate-500 light:bg-lightslate-50 shadow-lg rounded-lg ${paddingClass ? paddingClass : "p-6"} border ${borderColor ? borderColor : "border-darkslate-100"} hover:border-primary-500 align-start flex-none ${
    height || "h-full"
  } justify-start relative transform perspective-1200 w-full transition duration-75 ease-in-out ${classNames}`}
>
  {
    href ? (
      <a href={href} class={`h-full w-full`}>
        <Icon
          name="ri:arrow-right-up-line"
          class="h-6 float-right group-hover:text-primary-500 group-hover:translate-x-1 group-hover:-translate-y-1 transition-transform ease-in-out duration-100 z-20"
        />
        <Content title={title} body={body} class={`${contentClass ?? ""}`}>
          <slot />
        </Content>
      </a>
    ) : (
      <Content title={title} body={body} class={`${contentClass ?? ""}`}>
        <slot />
      </Content>
    )
  }
</div>
